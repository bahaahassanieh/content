id: Carbon Black Live Response - Create active session
version: -1
name: Carbon Black Live Response - Create active session
description: Create an active session, If the active session already will use the
  existing session.
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 32ce2bf9-0d4d-4478-8d19-d6e02b22feeb
    type: start
    task:
      id: 32ce2bf9-0d4d-4478-8d19-d6e02b22feeb
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "6"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: e78c405b-8cc7-44a1-8195-a6d9f1e7fc60
    type: title
    task:
      id: e78c405b-8cc7-44a1-8195-a6d9f1e7fc60
      version: -1
      name: Session created
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 895
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: 9315d2b5-5f84-4267-81d0-cab1f74ff5c3
    type: regular
    task:
      id: 9315d2b5-5f84-4267-81d0-cab1f74ff5c3
      version: -1
      name: Create new session
      description: Create a new CarbonBlack session for a given sensor.
      script: carbonblackliveresponse|||cb-session-create
      type: regular
      iscommand: true
      brand: carbonblackliveresponse
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      command-timeout: {}
      keepalive-timeout: {}
      sensor:
        simple: ${inputs.sensor}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 7a523366-6353-4e6d-89be-e47e6594d901
    type: playbook
    task:
      id: 7a523366-6353-4e6d-89be-e47e6594d901
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${CbLiveResponse.Sessions.CbSessionID}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: session
      PollingCommandName:
        simple: cb-session-info
      Timeout:
        simple: "10"
      dt:
        simple: CbLiveResponse.Sessions(val.Status != 'active'  || val.Status != 'Active'
          || val.Status != 'ACTIVE')
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 50,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: a3bbdf63-1d9f-4693-89fd-a691912a2e20
    type: regular
    task:
      id: a3bbdf63-1d9f-4693-89fd-a691912a2e20
      version: -1
      name: DeleteContext
      description: Delete field CbLiveResponse.Sessions from context, So it will not
        conflict with other states.
      scriptName: DeleteContext
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "7"
    scriptarguments:
      all: {}
      index: {}
      key:
        simple: CbLiveResponse.Sessions
      keysToKeep: {}
      subplaybook:
        simple: auto
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "7":
    id: "7"
    taskid: 41ec91e7-0c8d-4577-8e8d-07ef2df1d908
    type: regular
    task:
      id: 41ec91e7-0c8d-4577-8e8d-07ef2df1d908
      version: -1
      name: DeleteContext
      description: Delete field CbResponse.Sessions from context, So it will not conflict
        with other states.
      scriptName: DeleteContext
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      all: {}
      index: {}
      key:
        simple: CbResponse.Sessions
      keysToKeep: {}
      subplaybook:
        simple: auto
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 910,
        "width": 380,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: sensor
  value:
    simple: |2+

  required: true
  description: Sensor ID to create a session for.
  playbookInputQuery:
outputs:
- contextPath: CbLiveResponse.Sessions.CbSessionID
  description: Session ID
  type: number
fromversion: 5.0.0
tests:
- Carbon Black Live Response Test
